name: Compile tinymesa
description: Compiles a specific mesa version and extracts tinymesa.
inputs:
  mesa-tag:
    description: "mesa tag to compile"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
    - name: Install Python packages
      shell: bash
      run: |
        python -m venv .venv
        . .venv/bin/activate
        echo "${{ github.workspace }}/.venv/bin" >> "$GITHUB_PATH"
        python -m pip install meson mako pyyaml packaging
    - name: Install deps (macos)
      if: runner.os == 'macOS'
      shell: bash
      run: brew install bindgen cbindgen spirv-tools glslang llvm@20 lld@20 sirhcm/tinymesa/libclc@20 sirhcm/tinymesa/spirv-llvm-translator@20
    - name: Install rust deps (linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        curl -L https://github.com/rust-lang/rust-bindgen/releases/download/v0.71.1/bindgen-cli-installer.sh | sh
        sudo curl -L https://github.com/mozilla/cbindgen/releases/download/0.29.0/cbindgen-ubuntu22.04 -o /usr/bin/cbindgen
        sudo chmod +x /usr/bin/cbindgen
    - name: Setup APT
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo chown -R $USER:$USER /var/cache/apt/archives
        echo 'Acquire::GzipIndexes "true";' | sudo tee /etc/apt/apt.conf.d/gzip
        echo 'Acquire::http::Pipeline-Depth "5";' | sudo tee -a /etc/apt/apt.conf.d/99parallel
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' | sudo tee -a /etc/apt/apt.conf.d/99keep-debs
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-20 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc <<EOF
        path-exclude /usr/share/doc/*
        path-exclude /usr/share/man/*
        path-exclude /usr/share/info/*
        EOF
    - name: Cache APT
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives/
        key: apt-${{ runner.os }}-${{ env.APT_CACHE_VERSION }}
    - name: APT update + install
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt -qq update || true
        sudo apt-get -y --allow-unauthenticated --no-install-recommends install libllvm20 clang-20 lld-20 libdrm-dev libclc-20-dev libclang-20-dev llvm-20-dev
        sudo chown -R $USER:$USER /var/cache/apt/archives/
    - name: Install vulkan SDK (linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        curl -L https://sdk.lunarg.com/sdk/download/1.4.321.1/linux/vulkansdk-linux-x86_64-1.4.321.1.tar.xz | sudo tar -Jxf - -C /usr --strip-components=2
        sudo tee /usr/lib/pkgconfig/SPIRV-Tools.pc <<EOF
        prefix=/usr
        libdir=\${prefix}/lib
        includedir=\${prefix}/include

        Name: SPIRV-Tools
        Description: Tools for SPIR-V
        Version: 2025.3

        Libs: -L\${libdir} -lSPIRV-Tools-opt -lSPIRV-Tools -lSPIRV-Tools-link
        Cflags: -I\${includedir}
        EOF
    - name: Cache libLLVMSPIRVLib
      if: runner.os == 'Linux'
      id: cache-libLLVMSPIRVLib
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/SPIRV-LLVM-Translator
        key: libLLVMSPIRVLib-${{ runner.os }}
    - name: Build libLLVMSPIRVLib
      if: runner.os == 'Linux' && steps.cache-libLLVMSPIRVLib.outputs.cache-hit != 'true'
      shell: bash
      run: |
        git clone --depth 1 --branch v20.1.0 https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git
        mkdir SPIRV-LLVM-Translator/build && cd SPIRV-LLVM-Translator/build
        cmake ..
        make llvm-spirv -j`nproc`
    - name: Install libLLVMSPIRVLib
      if: runner.os == 'Linux'
      shell: bash
      run: |
        cd ${{ github.workspace }}/SPIRV-LLVM-Translator/build
        sudo make install
    - name: Build mesa
      shell: bash
      run: |
        git clone --depth 1 --branch ${{ inputs.mesa-tag }} https://gitlab.freedesktop.org/mesa/mesa.git ${{ github.workspace }}/mesa
        cd ${{ github.workspace }}/mesa
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          eval "$(brew shellenv)"
          touch include/xf86drm.h
          echo src/{compiler/meson.build,compiler/nir/meson.build,gallium/auxiliary/meson.build,nouveau/compiler/meson.build,util/meson.build} | xargs -n 1 sed -i '' '/gnu_symbol_visibility/d'
          export PATH="${{ github.workspace }}/.venv/bin:$PATH"
        else
          sed -i '/gnu_symbol_visibility/d' src/compiler/meson.build src/compiler/nir/meson.build src/gallium/auxiliary/meson.build src/nouveau/compiler/meson.build src/util/meson.build
        fi
        echo "subdir('tinymesa')" >> src/meson.build
        mkdir src/tinymesa
        cp ${{ github.workspace }}/meson.build src/tinymesa
        export CLANG_PATH=$(which clang-20)
        meson setup build/ -Db_staticpic=true -Dgallium-drivers=llvmpipe -Dplatforms="[]" -Dglx=disabled -Dvulkan-drivers=swrast,nouveau -Dopengl=false -Degl=disabled -Dgbm=disabled -Dvideo-codecs="[]"
        EXT=$([[ "${{ runner.os }}" == "macOS" ]] && echo ".dylib" || echo ".so")
        ninja -C build src/tinymesa/libtinymesa$EXT src/tinymesa/libtinymesa_cpu$EXT
    - name: Test loading with ctypes
      shell: bash
      run: |
        cd ${{ github.workspace }}/mesa/build/src/tinymesa
        EXT=$([[ "${{ runner.os }}" == "macOS" ]] && echo ".dylib" || echo ".so")
        python3 -c "from ctypes import CDLL; CDLL('./libtinymesa$EXT'), CDLL('./libtinymesa_cpu$EXT')"
